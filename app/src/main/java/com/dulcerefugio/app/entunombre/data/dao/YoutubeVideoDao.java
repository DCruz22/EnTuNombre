package com.dulcerefugio.app.entunombre.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.dulcerefugio.app.entunombre.data.dao.YoutubeVideo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table youtube_videos.
*/
public class YoutubeVideoDao extends AbstractDao<YoutubeVideo, String> {

    public static final String TABLENAME = "youtube_videos";

    /**
     * Properties of entity YoutubeVideo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Video_id = new Property(0, String.class, "video_id", true, "VIDEO_ID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Description = new Property(2, String.class, "description", false, "DESCRIPTION");
        public final static Property Thumbnail_url = new Property(3, String.class, "thumbnail_url", false, "THUMBNAIL_URL");
        public final static Property Created_at = new Property(4, java.util.Date.class, "created_at", false, "CREATED_AT");
    };


    public YoutubeVideoDao(DaoConfig config) {
        super(config);
    }
    
    public YoutubeVideoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'youtube_videos' (" + //
                "'VIDEO_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: video_id
                "'TITLE' TEXT," + // 1: title
                "'DESCRIPTION' TEXT," + // 2: description
                "'THUMBNAIL_URL' TEXT," + // 3: thumbnail_url
                "'CREATED_AT' INTEGER);"); // 4: created_at
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'youtube_videos'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, YoutubeVideo entity) {
        stmt.clearBindings();
 
        String video_id = entity.getVideo_id();
        if (video_id != null) {
            stmt.bindString(1, video_id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }
 
        String thumbnail_url = entity.getThumbnail_url();
        if (thumbnail_url != null) {
            stmt.bindString(4, thumbnail_url);
        }
 
        java.util.Date created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindLong(5, created_at.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public YoutubeVideo readEntity(Cursor cursor, int offset) {
        YoutubeVideo entity = new YoutubeVideo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // video_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // description
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // thumbnail_url
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)) // created_at
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, YoutubeVideo entity, int offset) {
        entity.setVideo_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDescription(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setThumbnail_url(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreated_at(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(YoutubeVideo entity, long rowId) {
        return entity.getVideo_id();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(YoutubeVideo entity) {
        if(entity != null) {
            return entity.getVideo_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
